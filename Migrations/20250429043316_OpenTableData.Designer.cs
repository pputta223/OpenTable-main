// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenTable.Models.DataLayer;

#nullable disable

namespace OpenTable.Migrations
{
    [DbContext(typeof(OpenTableContext))]
    [Migration("20250429043316_OpenTableData")]
    partial class OpenTableData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.Cuisine", b =>
                {
                    b.Property<string>("CuisineId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CuisineId");

                    b.ToTable("Cuisines");

                    b.HasData(
                        new
                        {
                            CuisineId = "american",
                            Name = "American"
                        },
                        new
                        {
                            CuisineId = "french",
                            Name = "French"
                        },
                        new
                        {
                            CuisineId = "italian",
                            Name = "Italian"
                        },
                        new
                        {
                            CuisineId = "mexican",
                            Name = "Mexican"
                        },
                        new
                        {
                            CuisineId = "chinese",
                            Name = "Chinese"
                        },
                        new
                        {
                            CuisineId = "japanese",
                            Name = "Japanese"
                        },
                        new
                        {
                            CuisineId = "indian",
                            Name = "Indian"
                        },
                        new
                        {
                            CuisineId = "mediterranean",
                            Name = "Mediterranean"
                        });
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.Metropolis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Metropolises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Chicago"
                        },
                        new
                        {
                            Id = 2,
                            Name = "San Francisco"
                        });
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.Price", b =>
                {
                    b.Property<string>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            PriceId = "$",
                            Name = "$"
                        },
                        new
                        {
                            PriceId = "$$",
                            Name = "$$"
                        },
                        new
                        {
                            PriceId = "$$$",
                            Name = "$$$"
                        },
                        new
                        {
                            PriceId = "$$$$",
                            Name = "$$$$"
                        });
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("PartySize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeSlot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId", "Date", "TimeSlot");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CuisineId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MetropolisId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenHours")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PriceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CuisineId");

                    b.HasIndex("MetropolisId");

                    b.HasIndex("PriceId");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "1299 Ogden Rd. Wheaton, IL 60006",
                            CuisineId = "american",
                            LogoPath = "MetroGrill.jpg",
                            MetropolisId = 1,
                            Name = "Metro Grill",
                            OpenHours = "11:00-14:00;17:00-21:00",
                            Phone = "999-999-9999",
                            PriceId = "$$"
                        },
                        new
                        {
                            Id = 2,
                            Address = "88 Spice Blvd, Edison, NJ 08817",
                            CuisineId = "american",
                            LogoPath = "SaffronPalace.jpg",
                            MetropolisId = 2,
                            Name = "Saffron Palace",
                            OpenHours = "12:00-15:00;18:00-22:00",
                            Phone = "888-888-8888",
                            PriceId = "$$$"
                        },
                        new
                        {
                            Id = 3,
                            Address = "456 Bay Street, Miami Beach, FL 33139",
                            CuisineId = "french",
                            LogoPath = "OceansCatch.jpg",
                            MetropolisId = 1,
                            Name = "Ocean's Catch",
                            OpenHours = "13:00-22:00",
                            Phone = "777-777-7777",
                            PriceId = "$$$$"
                        },
                        new
                        {
                            Id = 4,
                            Address = "2300 Sunset Blvd, Los Angeles, CA 90026",
                            CuisineId = "italian",
                            LogoPath = "Burger Haven.jpg",
                            MetropolisId = 2,
                            Name = "Burger Haven",
                            OpenHours = "10:00-23:00",
                            Phone = "666-666-6666",
                            PriceId = "$"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1500 Sakura Lane, San Francisco, CA 94110",
                            CuisineId = "mexican",
                            LogoPath = "TokyoBites.jpg",
                            MetropolisId = 1,
                            Name = "Tokyo Bites",
                            OpenHours = "11:30-14:30;17:00-22:00",
                            Phone = "555-555-5555",
                            PriceId = "$$"
                        },
                        new
                        {
                            Id = 6,
                            Address = "77 Olive Avenue, Boston, MA 02108",
                            CuisineId = "chinese",
                            LogoPath = "BellaCucina.jpg",
                            MetropolisId = 2,
                            Name = "Bella Cucina",
                            OpenHours = "12:00-15:00;18:00-23:00",
                            Phone = "444-444-4444",
                            PriceId = "$$$"
                        });
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OpenTable.Models.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OpenTable.Models.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenTable.Models.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OpenTable.Models.DomainModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.Reservation", b =>
                {
                    b.HasOne("OpenTable.Models.DomainModels.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OpenTable.Models.DomainModels.Restaurant", b =>
                {
                    b.HasOne("OpenTable.Models.DomainModels.Cuisine", "Cuisine")
                        .WithMany()
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenTable.Models.DomainModels.Metropolis", "Metropolis")
                        .WithMany()
                        .HasForeignKey("MetropolisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenTable.Models.DomainModels.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cuisine");

                    b.Navigation("Metropolis");

                    b.Navigation("Price");
                });
#pragma warning restore 612, 618
        }
    }
}
